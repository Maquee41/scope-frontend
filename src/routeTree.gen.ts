/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthImport } from './routes/_auth'
import { Route as AuthLoginImport } from './routes/_auth/login'
import { Route as AuthSignUpImport } from './routes/_auth/sign-up'
import { Route as PrivateImport } from './routes/_private'
import { Route as PrivateProfileImport } from './routes/_private/profile'
import { Route as PrivateWorkflowIdImport } from './routes/_private/workflow/$id'
import { Route as PrivateWorkflowIndexImport } from './routes/_private/workflow/index'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const PrivateRoute = PrivateImport.update({
  id: '/_private',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PrivateProfileRoute = PrivateProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => PrivateRoute,
} as any)

const AuthSignUpRoute = AuthSignUpImport.update({
  id: '/sign-up',
  path: '/sign-up',
  getParentRoute: () => AuthRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRoute,
} as any)

const PrivateWorkflowIndexRoute = PrivateWorkflowIndexImport.update({
  id: '/workflow/',
  path: '/workflow/',
  getParentRoute: () => PrivateRoute,
} as any)

const PrivateWorkflowIdRoute = PrivateWorkflowIdImport.update({
  id: '/workflow/$id',
  path: '/workflow/$id',
  getParentRoute: () => PrivateRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_private': {
      id: '/_private'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PrivateImport
      parentRoute: typeof rootRoute
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof AuthImport
    }
    '/_auth/sign-up': {
      id: '/_auth/sign-up'
      path: '/sign-up'
      fullPath: '/sign-up'
      preLoaderRoute: typeof AuthSignUpImport
      parentRoute: typeof AuthImport
    }
    '/_private/profile': {
      id: '/_private/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof PrivateProfileImport
      parentRoute: typeof PrivateImport
    }
    '/_private/workflow/$id': {
      id: '/_private/workflow/$id'
      path: '/workflow/$id'
      fullPath: '/workflow/$id'
      preLoaderRoute: typeof PrivateWorkflowIdImport
      parentRoute: typeof PrivateImport
    }
    '/_private/workflow/': {
      id: '/_private/workflow/'
      path: '/workflow'
      fullPath: '/workflow'
      preLoaderRoute: typeof PrivateWorkflowIndexImport
      parentRoute: typeof PrivateImport
    }
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
  AuthSignUpRoute: typeof AuthSignUpRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
  AuthSignUpRoute: AuthSignUpRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface PrivateRouteChildren {
  PrivateProfileRoute: typeof PrivateProfileRoute
  PrivateWorkflowIdRoute: typeof PrivateWorkflowIdRoute
  PrivateWorkflowIndexRoute: typeof PrivateWorkflowIndexRoute
}

const PrivateRouteChildren: PrivateRouteChildren = {
  PrivateProfileRoute: PrivateProfileRoute,
  PrivateWorkflowIdRoute: PrivateWorkflowIdRoute,
  PrivateWorkflowIndexRoute: PrivateWorkflowIndexRoute,
}

const PrivateRouteWithChildren =
  PrivateRoute._addFileChildren(PrivateRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof PrivateRouteWithChildren
  '/login': typeof AuthLoginRoute
  '/sign-up': typeof AuthSignUpRoute
  '/profile': typeof PrivateProfileRoute
  '/workflow/$id': typeof PrivateWorkflowIdRoute
  '/workflow': typeof PrivateWorkflowIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof PrivateRouteWithChildren
  '/login': typeof AuthLoginRoute
  '/sign-up': typeof AuthSignUpRoute
  '/profile': typeof PrivateProfileRoute
  '/workflow/$id': typeof PrivateWorkflowIdRoute
  '/workflow': typeof PrivateWorkflowIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteWithChildren
  '/_private': typeof PrivateRouteWithChildren
  '/_auth/login': typeof AuthLoginRoute
  '/_auth/sign-up': typeof AuthSignUpRoute
  '/_private/profile': typeof PrivateProfileRoute
  '/_private/workflow/$id': typeof PrivateWorkflowIdRoute
  '/_private/workflow/': typeof PrivateWorkflowIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/login'
    | '/sign-up'
    | '/profile'
    | '/workflow/$id'
    | '/workflow'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/login'
    | '/sign-up'
    | '/profile'
    | '/workflow/$id'
    | '/workflow'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/_private'
    | '/_auth/login'
    | '/_auth/sign-up'
    | '/_private/profile'
    | '/_private/workflow/$id'
    | '/_private/workflow/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  PrivateRoute: typeof PrivateRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  PrivateRoute: PrivateRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth",
        "/_private"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/login",
        "/_auth/sign-up"
      ]
    },
    "/_private": {
      "filePath": "_private.tsx",
      "children": [
        "/_private/profile",
        "/_private/workflow/$id",
        "/_private/workflow/"
      ]
    },
    "/_auth/login": {
      "filePath": "_auth/login.tsx",
      "parent": "/_auth"
    },
    "/_auth/sign-up": {
      "filePath": "_auth/sign-up.tsx",
      "parent": "/_auth"
    },
    "/_private/profile": {
      "filePath": "_private/profile.tsx",
      "parent": "/_private"
    },
    "/_private/workflow/$id": {
      "filePath": "_private/workflow/$id.tsx",
      "parent": "/_private"
    },
    "/_private/workflow/": {
      "filePath": "_private/workflow/index.tsx",
      "parent": "/_private"
    }
  }
}
ROUTE_MANIFEST_END */
